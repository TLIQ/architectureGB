Цель задания — научиться критически подходить к принятию решений, постараться понять, какие реализации считаются хорошими, а какие следует переписать.
1. Провести анализ проекта на использование антипаттернов. Какие антипаттерны удалось обнаружить? 
О каких из них вы заранее знали, а какие возникли случайно?
2. Распределить обнаруженные антипаттерны по категориям согласно предложенной здесь классификации. 
Предложить способы избавления от антипаттернов. Возникли ли случаи, когда существование антипаттерна оправдано?


Решение:
1. в Сервисах класс Basket на моц взлягд является божественным объектом, его однозначно надо разносить, например,
 public function checkout(): void
  public function checkoutProcess()
  
  однозначно надо выносить в куда-то в другое место, так как они не относятся к этому классу.
  
2. Hsrd Code в классе внутри сервисов PromoCode
 $discount = 5.50;
 явно додно храниться как-то иначе и обращаться, например, к модели
 
 3. Хорошими в реализации мне кажутся такие классы как Product или User, там нет ничего лишнего, все понятно и просто.
 
 4. Нашла один полтергейст это класс BillingException, туда или нужно добавлять какой-то функционал или удалять целиком этот класс.
